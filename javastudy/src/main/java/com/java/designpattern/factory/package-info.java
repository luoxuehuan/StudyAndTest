/**
 * 
 */
/**
 * @author lxh
 * 
 * 设计模式案例
 * 
 * 设计模式：
 * 	1.简单工厂模式
 *  2.策略模式
 * 	3.单例模式
 * 		懒汉式.  比较懒,有人来,才创建 
 * 		饿汉式.  饿了,直接创建好。{@link}
 * 	4.装饰模式
 * 		解释：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰模式比生成子类更为灵活。
 * 		把4个动作放到一起做。
 * 		案例： IO的Buffer.缓存是装饰模式的。  
 * 			动态的给inputsteam 增加 缓存功能。把inputstream作为bufferreader的一个成员变量。
 *  5.建造者模式
 *  	建造的过程是稳定的
 * 
 * 	6.享元模式
 * 		案例.Spring的Bean Service 就是享元模式。而不是单例模式。
 * 
 * 	7.代理模式Proxy
 * 		解释：为其他对象提供一种代理以控制对这个对象的访问。
 * 		
 * 		Proxy类,保存一个引用使得代理可以访问实体,并提供一个与Subject的接口相同的接口，这样代理就可以用来替代实体RealSubject。
 * 		比喻：A要送C花,A不认识C,所以让B代替送。 最后B和C在一起了。   代理就是真实对象的引用。
 * 		使用场景：
 * 			远程代理。
 * 			虚拟代理。浏览器用代理模式优化加载。
 * 			安全代理。
 * 			智能指引。
 * 		思考： 代理模式和装饰模式有是区别? 装饰加了功能。代理是保留对真实对象的一个引用。
 * 	
 * 设计原则：
 * 1.单一职责原则
 * 2.封闭开放原则
 * 		不能修改,可以扩展。
 * 3.依赖倒置原则
 * 		高层模块不要依赖底层模块。两个都应该依赖抽象。
 * 4.里氏代换原则
 * 		子类型必须可以替换父类型
 * 		比如： 鸟会飞，企鹅不会飞，企鹅不能以子类身份出现。
 * 5.
 *
 */
package com.java.designpattern.factory;